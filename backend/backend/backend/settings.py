"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from os import environ

# Determine Environment

DEVELOPMENT = environ.get("DEVELOPMENT", "false").lower() == "true"
CLOUD = not DEVELOPMENT
DEBUG = DEVELOPMENT or environ.get("DEBUG", "false").lower() == "true"
STAGING = CLOUD and DEBUG
PRODUCTION = CLOUD and not DEBUG

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-p2aniflccfqo1)fyiph$g_sw9v6h2i$-h2uho2qr+7&7v%5@a1"

ALLOWED_HOSTS = []

if CLOUD:
    if environ.get("INSTANCE_IP", None) is not None:
        ALLOWED_HOSTS.append(environ.get("INSTANCE_IP"))

    if environ.get("HOSTNAMES", None) is not None:
        ALLOWED_HOSTS += environ.get("HOSTNAMES").split(",")

if DEVELOPMENT:
    ALLOWED_HOSTS = ["*"]

CORS_ALLOWED_ORIGINS = []

if PRODUCTION:
    CORS_ALLOWED_ORIGINS = [
        "https://econplaza.bebbo.link",
        "https://api.econplaza.bebbo.link",
    ]
elif STAGING:
    CORS_ALLOWED_ORIGINS = [
        "https://staging.econplaza.bebbo.link",
        "https://api.staging.econplaza.bebbo.link",
    ]

if DEVELOPMENT:
    CORS_ALLOW_ALL_ORIGINS = True

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "accounts.apps.AccountsConfig",
    "reports.apps.ReportsConfig",
    "plazas.apps.PlazasConfig",
    "labels.apps.LabelsConfig",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
]

TEST_RUNNER = "xmlrunner.extra.djangotestrunner.XMLTestRunner"
TEST_OUTPUT_DIR = environ.get("TEST_OUTPUT_DIR", "./test-results")
TEST_OUTPUT_FILE_NAME = environ.get("TEST_OUTPUT_FILE_NAME", "results.xml")

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

if CLOUD:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": environ.get("DB_NAME", ""),
            "USER": environ.get("DB_USERNAME", ""),
            "PASSWORD": environ.get("DB_PASSWORD", ""),
            "HOST": environ.get("DB_HOST", ""),
            "PORT": environ.get("DB_PORT", "5432"),
        }
    }

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "my_cache_table",
        "TIMEOUT": 60 * 15,  # 15 Minutes
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "static"

# Django user authentication settings
# https://docs.djangoproject.com/en/3.2/topics/auth/customizing/#auth-custom-user

AUTH_USER_MODEL = "accounts.User"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# All settings related to Econplaza
ECONPLAZA = {"QUANTITY_VOUCHES_FOR_VERIFICATION": 5}

# Google Recaptcha Settings
# SECURITY WARNING: keep the secret key used in production secret!
GOOGLE_VERIFY_RECAPTCHA_URL = "https://www.google.com/recaptcha/api/siteverify"
RECAPTCHA_SECRET_KEY = "6LfbGWMeAAAAAEbbZh7NoJpXqAz16dWUFKC3wLnM"
